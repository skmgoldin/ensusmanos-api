# https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/ECS/FargateLaunchType/clusters/private-vpc.yml

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  StackName:
    Type: String
  CertificateArn:
    Type: String

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '192.168.0.0/16'
    PublicZero:
      CIDR: '192.168.0.0/24'
    PublicOne:
      CIDR: '192.168.1.0/24'
    PrivateZero:
      CIDR: '192.168.2.0/24'
    PrivateOne:
      CIDR: '192.168.3.0/24'

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Public subnets
  PublicSubnetZero:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      CidrBlock: !FindInMap [SubnetConfig, PublicZero, CIDR]
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1 
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      CidrBlock: !FindInMap [SubnetConfig, PublicOne, CIDR]

  # Private subnets
  PrivateSubnetZero:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0 
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false
      CidrBlock: !FindInMap [SubnetConfig, PrivateZero, CIDR]
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1 
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false
      CidrBlock: !FindInMap [SubnetConfig, PrivateOne, CIDR]

  # Public network infrastructure
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PublicSubnetZeroRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetZero
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  
  # Private network infrastructure
  NatGatewayZeroAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayZero:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayZeroAttachment.AllocationId
      SubnetId: !Ref PublicSubnetZero
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  PrivateRouteTableZero:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PrivateRouteZero:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableZero
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayZero
  PrivateRouteTableZeroAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableZero
      SubnetId: !Ref PrivateSubnetZero
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne

  # Security group for access to containers on the private subnets
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Access to the Fargate containers'
      VpcId: !Ref Vpc
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Ingress from the public ALB'
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG

  # Load balancer
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Internet-facing ALB access policy'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: GatewayAttachement
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetZero
        - !Ref PublicSubnetOne
      SecurityGroups: [!Ref PublicLoadBalancerSG]
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: dummy-target-group
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  PublicLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: 'HTTPS'
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  PublicLoadBalancerHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DummyTargetGroupPublic
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS

  # IAM policy allowing ECS to manage itself
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  # IAM role for ECS task agents
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref EcsCluster
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'ClusterName' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'ExternalUrl' ] ]
  HostedZoneId:
    Description: The canonical hosted zone ID of the load balancer
    Value: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'HostedZoneId' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'ECSRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'Vpc'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'VPCId' ] ]
  PublicSubnetZero:
    Description: Public subnet zero 
    Value: !Ref 'PublicSubnetZero'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'PublicSubnetZero' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'PublicSubnetOne' ] ]
  PrivateSubnetZero:
    Description: Private subnet zero
    Value: !Ref 'PrivateSubnetZero'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'PrivateSubnetZero' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'PrivateSubnetOne' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'ECSTaskExecutionRole' ] ]
  PublicHttpListener:
    Description: The ARN of the public load balancer's HTTP Listener
    Value: !Ref PublicLoadBalancerHttpListener
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'PublicHttpListener' ] ]
  PublicHttpsListener:
    Description: The ARN of the public load balancer's HTTPS Listener
    Value: !Ref PublicLoadBalancerHttpsListener
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'PublicHttpsListener' ] ]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref StackName, 'FargateContainerSecurityGroup' ] ]

